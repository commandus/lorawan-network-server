syntax = "proto3";

package iridium;

option cc_enable_arenas = true;

import "pkt2.proto";
import "iridium/time5.proto";
import "iridium/gps16.proto";

/*
typedef ALIGN struct {  30 bytes + 3 header
	uint8_t packettype;		    //< 0) 1 байт 0х08 - координаты с NMEA приемников LAT, LON,
	uint8_t gpsolddata:1;		//< 1)GPS old data, GPS not read
	uint8_t gpsencoded:1;		//< GPS data encoded
	uint8_t gpsfrommemory:1;	//< data got from the memory
	uint8_t gpsnoformat:1;		//< memory is not formatted
	uint8_t gpsnosats:1;		//< No visible GPS salellites
	uint8_t gpsbadhdop:1;		//< GPS HDOP = 99 or > 50
	uint8_t gpstime:1;		    //< 1 бит 1-0  GPS.valid=0x01 или 0;     GPS.time_valid=0b0000 0010 или 0;
	uint8_t gpsnavdata:1;		//< 1 бит 1-0  GPS.valid=0x01 или 0;     GPS.time_valid=0b0000 0010 или 0;
	uint8_t sats;		        //< 2) 1 байт  кол. видимых спутников
	gps_coord_t coord;		    //< 3) 16 байт (или 10 байт??? ) hex ?
	uint8_t bat:6;			    //< 19) байт бортовое напряжение fixed point (32=3.2 вольта) (от 2.0 до 4.0)
	uint8_t alarmlow:1;	        //< bit 6 < 2V, bit 7 > 4V
	uint8_t alarmhigh:1;		//< bit 6 < 2V, bit 7 > 4V
	int8_t temperature;	        //< 20) 1 байт температура
	uint8_t r2;			        //< 21) 1 байт номер пакета?? - он же индекс в таблице кодировки
	uint8_t failurepower:1;		//< 22) device status power loss
	uint8_t failureeep:1;		//< EEPROM failure
	uint8_t failureclock:1;		//< clock not responding
	uint8_t failurecable:1;		//< MAC not responding
	uint8_t failureint0:1;		//< clock int failure
	uint8_t failurewatchdog:1;	//< software failure
	uint8_t failurenoise:1;		//< blocks in memory found
	uint8_t failureworking:1;	//< device was
	uint16_t key;			    // 23) 2 байт     volatile unsigned int packet_key;  младшие 16 бит
	// uint8_t		 res[3];
	time5 time;                 // 25 5 байт
	// uint32_t crc;
} PACKED packet8_t;
*/
/// A lot of flags
message Packet8
{
    // backend database
    option(pkt2.output) = {
        id: 10108				// LMDB primary key prefix
    	sql {
    		dialect: SQL_POSTGRESQL
    	}
    };

    // input packet description
    option(pkt2.packet) = { 
        name: "animal"
        short_name: "Животные"
        full_name: "Животные"
        source: [{
            proto: PROTO_TCP
            address: "84.237.104.57"
            port: 0 // any port
        }]
        // set: "packet_type = 8; gps_flags = SET_BIT(gpsolddata, 0) | SET_BIT(gpsencoded, 1) | SET_BIT(gpsfrommemory, 2) | SET_BIT(gpsnoformat, 3) | SET_BIT(gpsnosats, 4) | SET_BIT(gpsbadhdop, 5) | SET_BIT(gpstime, 6) | SET_BIT(gpsnavdata, 7); sats = satellite_visible_count; battery = ((battery_voltage * 10) & 0x3f) | SET_BIT(battery_low, 6) | SET_BIT(battery_high, 7); packet_key = 0; r2 = 0; temperature = temperature_c; SET(gps_coords, coordinates); SET(time5, measure_time);" 
        fields: [
        {
            name: "ie_id"
            type: INPUT_UINT
            size: 1
            offset: 0
            tag: 2			      ///< tag 2- Iridium user payload
        },
        {
            name: "ie_size"
            type: INPUT_UINT
            size: 2
            offset: 1
            endian: ENDIAN_BIG_ENDIAN
            tag: 30               ///< tag, 30 bytes long
        },
        {
            name: "packet_type"
            type: INPUT_UINT
            size: 1
            offset: 3
            tag: 8			      ///< tag 8- animal. check this.
        },
        {
            name: "gps_flags"
            type: INPUT_UINT
            size: 1
            offset: 4
        },
        {
            name: "sats"
            type: INPUT_UINT
            size: 1
            offset: 5
        },
        {
            name: "gps_coordinates"
            type: INPUT_MESSAGE
            size: 16
            offset: 6
        },
        {
            name: "battery"
            type: INPUT_UINT
            size: 1
            offset: 22
        },
        {
            name: "temperature"
            type: INPUT_INT
            size: 1
            offset: 23
        },
        {
            name: "r2"
            type: INPUT_UINT
            size: 1
            offset: 24
        },
        {
            name: "failure_flags"
            type: INPUT_UINT
            size: 1
            offset: 25
        },
        {
            name: "packet_key"
            type: INPUT_UINT
            size: 2
            offset: 26
            endian: ENDIAN_BIG_ENDIAN
        },
        {
            name: "time5"
            type: INPUT_MESSAGE
            size: 5
            offset: 28
            endian: ENDIAN_BIG_ENDIAN
        }
        ]
    };
	// structure 16 bytes long (bytes 3..18) 
    GPSCoordinates gps_coordinates = 1 [(pkt2.variable) = {
        get: "field.gps_coordinates"
    }];

	// structure 5 bytes long (bytes 25..30) 
    Time5 time5 = 2 [(pkt2.variable) = {
        get: "field.time5"
    }];

    // output 
    bool gpsolddata = 3 [(pkt2.variable) = {
        name: "gpsolddata"
        short_name: "GPS old data"
        get: "field.packet8.gps_flags & (1 << 0)"
    }];

    bool gpsencoded = 4 [(pkt2.variable) = {
        name: "gpsencoded"
        short_name: "GPS data encoded"
        get: "(field.packet8.gps_flags & (1 << 1))"
    }];

    bool gpsfrommemory = 5 [(pkt2.variable) = {
        name: "gpsfrommemory"
        short_name: "data got from the memory"
        get: "(field.packet8.gps_flags & (1 << 2))"
    }];
    
    bool gpsnoformat = 6 [(pkt2.variable) = {
        name: "gpsfrommemory"
        short_name: "memory is not formatted"
        get: "(field.packet8.gps_flags & (1 << 3))"
    }];
    
    bool gpsnosats = 7 [(pkt2.variable) = {
        name: "gpsfrommemory"
        short_name: "No visible GPS salellites"
        get: "(field.packet8.gps_flags & (1 << 4))"
    }];

    bool gpsbadhdop = 8 [(pkt2.variable) = {
        name: "gpsbadhdop"
        short_name: "GPS HDOP = 99 or > 50"
        get: "(field.packet8.gps_flags & (1 << 6))"
    }];

    bool gpstime = 9 [(pkt2.variable) = {
        name: "gpstime"
        short_name: "GPS.valid"
        get: "(field.packet8.gps_flags & (1 << 7))"
    }];

    bool gpsnavdata = 10 [(pkt2.variable) = {
        name: "gpsnavdata"
        short_name: "time valid"
        get: "(field.packet8.gps_flags & (1 << 8))"
    }];
    
    uint32 satellite_visible_count = 11 [(pkt2.variable) = {
        name: "satellite_visible_count"
        short_name: "Видимых спутников"
        get: "field.packet8.sats"
    }];
    
	float battery_voltage = 12 [(pkt2.variable) = {
        name: "battery_voltage"
        short_name: "бортовое напряжение"
        get: "(field.packet8.battery & 0x3f) / 10."
    }];
    
	bool battery_low = 13 [(pkt2.variable) = {
        name: "battery_low"
        short_name: "низкое бортовое напряжение"
        get: "field.packet8.battery & 0x40"
    }];

	bool battery_high = 14 [(pkt2.variable) = {
        name: "battery_high"
        short_name: "высокое бортовое напряжение"
        get: "field.packet8.battery & 0x80"
    }];

	int32 temperature_c = 15 [(pkt2.variable) = {
        name: "temperature_c"
        short_name: "бортовая температура"
        get: "field.packet8.temperature"
        measure_unit: "C"
    }];
	
	int32 reserved = 16 [(pkt2.variable) = {
        name: "reserved2"
        get: "field.packet8.r2"
    }];

	bool failurepower = 17 [(pkt2.variable) = {
        name: "failurepower"
        short_name: "device status power loss"
        get: "field.packet8.failure_flags & (1 << 0)"
    }];
	
	bool failureeep = 18 [(pkt2.variable) = {
        name: "failureeep"
        short_name: "EEPROM failure"
        get: "field.packet8.failure_flags & (1 << 1)"
    }];

	bool failureclock = 19 [(pkt2.variable) = {
        name: "failureclock"
        short_name: "clock not responding"
        get: "field.packet8.failure_flags & (1 << 2)"
    }];

	bool failurecable = 20 [(pkt2.variable) = {
        name: "failurecable"
        short_name: "MAC not responding"
        get: "field.packet8.failure_flags & (1 << 3)"
    }];

	bool failureint0 = 21 [(pkt2.variable) = {
        name: "failureint0"
        short_name: "clock int failure"
        get: "field.packet8.failure_flags & (1 << 4)"
    }];

	bool software_failure = 22 [(pkt2.variable) = {
        name: "software_failure"
        short_name: "software failure"
        get: "field.packet8.failure_flags & (1 << 5)"
    }];

	bool failurewatchdog = 23 [(pkt2.variable) = {
        name: "failurewatchdog"
        short_name: "failure watchdog"
        get: "field.packet8.failure_flags & (1 << 6)"
    }];
    
    bool failurenoise = 24 [(pkt2.variable) = {
        name: "failurenoise"
        short_name: "blocks in memory found"
        get: "field.packet8.failure_flags & (1 << 7)"
    }];
    
    bool failureworking = 25 [(pkt2.variable) = {
        name: "failureworking"
        short_name: "failure working"
        get: "field.packet8.failure_flags & (1 << 8)"
    }];

	uint32 key = 26 [(pkt2.variable) = {
        name: "key"
        get: "field.packet8.packet_key"
    }];
}
